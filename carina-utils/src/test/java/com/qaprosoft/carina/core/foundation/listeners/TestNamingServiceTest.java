package com.qaprosoft.carina.core.foundation.listeners;

import com.qaprosoft.carina.core.foundation.utils.R;
import org.testng.Assert;
import org.testng.ITestResult;
import org.testng.Reporter;
import org.testng.annotations.Test;

public class TestNamingServiceTest {

    private static final String TEST_NAMING_PATTERN = R.CONFIG.get("test_naming_pattern");


    @Test
    public void testGetTestNameWhenTestNameIsNull() {
        try {
            TestNamingService.setTestName(null);
            TestNamingService.getTestName();
        } catch (RuntimeException e) {
            Assert.assertEquals(e.getMessage(), "Unable to detect full test name yet!");
        }
    }

    @Test
    public void testGetTestNameAfterSetTestName() {
        String testMethodName = "customTestName";

        TestNamingService.setTestName(testMethodName);
        String testName = TestNamingService.getTestName();

        Assert.assertEquals(testName, testMethodName, "Test name wasn't set");
    }

    @Test
    public void testGetTestNameWithITestResult() {
        ITestResult result = Reporter.getCurrentTestResult();
        String testName = TestNamingService.getTestName(result);

        Assert.assertEquals(testName, result.getTestContext().getCurrentXmlTest().getName() + " - " + result.getMethod().getMethodName(),
                testName + " wasn't generated by pattern: " + TEST_NAMING_PATTERN);
    }

    @Test
    public void testGetPackageName() {
        ITestResult result = Reporter.getCurrentTestResult();
        String packageName = TestNamingService.getPackageName(result);

        Assert.assertEquals(packageName, result.getMethod().getRealClass().getPackage().getName(),
                "Package name " + packageName + " wasn't generated correctly");
    }

}
